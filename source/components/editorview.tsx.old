// import React, { Component }  from 'react';
import * as PropTypes from 'prop-types';
// import { makeSetFilterAction, makeClearFiltersAction } from "../actions";
import * as React from 'react';
// import ReactDOM from 'react-dom'
// const ReactMarkdown = require('react-markdown')
import ReactMde from "react-mde";
import * as Showdown from "showdown";
import "react-mde/lib/styles/css/react-mde-all.css";

type EditorViewState = {
  value: string;
  tab: "write" | "preview";
  doc: object;
  text: string;
  title: string;
}

export class EditorView extends React.Component<EditorViewState> {
  converter: Showdown.Converter;
  constructor(props: Readonly<EditorViewState>) {
    super(props);
    this.state = {
      doc: props.doc,
      // text: props.doc.text,
      // title: props.doc.title,
      // value: props.doc.text
    }
    this.converter = new Showdown.Converter({
      tables: true,
      simplifiedAutoLink: true,
      strikethrough: true,
      tasklists: true
    });
  }

  handleTabChange = (tab: "write" | "preview") => {
    this.setState({tab})
  };

  handleValueChange = (value: string) => {
    this.setState({value});
  };

  render() {
    return <div>
      {/* <h1>{this.props.title}</h1> */}
      <ReactMde
        // value={this.state.value}
        onChange={this.handleValueChange}
        selectedTab={"preview"}
        onTabChange={this.handleTabChange}
        // onChange={() => Console.log("Document changed")}
        generateMarkdownPreview={markdown =>
          Promise.resolve(this.converter.makeHtml(markdown))
        }
      />
    </div>;
    // return <div>
      // <h1>{doc.title}</h1>
      // <pre>{doc.text}</pre>
    // </div>;
    // } else {
    //   return <div>Select a document.</div>;
    // }
  }
}

// EditorView.propTypes = {
//   doc: PropTypes.func,
//   handleActions: PropTypes.func
// };

export default EditorView;
